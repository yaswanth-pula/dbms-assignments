 **** TASK 1 : Find out the number of documentaries with deleted scenes. ****
  	
 mysql> SELECT title FROM film 
 	WHERE special_features LIKE "%Deleted Scenes%" 
 	AND film_id IN ( SELECT film_id FROM film_category 
 				WHERE category_id = (SELECT category_id FROM category WHERE name ="Documentary")
 		  	); 		  	
	+------------------------+
	| title                  |
	+------------------------+
	| ACADEMY DINOSAUR       |
	| ADAPTATION HOLES       |
	| BEACH HEARTBREAKERS    |
	| BED HIGHBALL           |
	| BONNIE HOLOCAUST       |
	| CAUSE DATE             |
	| CHICKEN HELLFIGHTERS   |
	| COAST RAINBOW          |
	| DELIVERANCE MULHOLLAND |
	| DOZEN LION             |
	| HALLOWEEN NUTS         |
	| HEAVYWEIGHTS BEAST     |
	| HUNTER ALTER           |
	| MADISON TRAP           |
	| METAL ARMAGEDDON       |
	| MIDSUMMER GROUNDHOG    |
	| MODERN DORADO          |
	| NEWSIES STORY          |
	| NORTH TEQUILA          |
	| NOTORIOUS REUNION      |
	| PACIFIC AMISTAD        |
	| PELICAN COMFORTS       |
	| POCUS PULP             |
	| PRINCESS GIANT         |
	| RAIDERS ANTITRUST      |
	| RAINBOW SHOCK          |
	| SECRET GROUNDHOG       |
	| SHOW LORD              |
	| SPOILERS HELLFIGHTERS  |
	| UNITED PILOT           |
	| UNTOUCHABLES SUNRISE   |
	| VIRGINIAN PLUTO        |
	| WAGON JAWS             |
	| WIFE TURN              |
	+------------------------+
	34 rows in set (0.00 sec)




**** TASK 2: Find out the number of sci-fi movies rented by the store managed by Jon Stephens ****
	
 mysql> SELECT COUNT(*) AS SciFI_Rented_By_Jon 
	FROM rental INNER JOIN inventory  
	ON rental.inventory_id = inventory.inventory_id 
	INNER JOIN film_list ON inventory.film_id = film_list.FID 
	WHERE film_list.category = "Sci-Fi" 
	AND inventory.store_id = 
			(SELECT store_id FROM store 
				WHERE manager_staff_id = 
				( SELECT staff_id FROM staff WHERE first_name = "Jon" AND last_name = "Stephens" )  
            );
       
	+-------------------+
	|SciFI_Rented_By_Jon|
	+-------------------+
	|             	580 |
	+-------------------+
	1 row in set (0.00 sec)





 ***** TASK 3 : Find out the total sales from Animation movies. ******
 
 mysql> SELECT SUM(payment.amount) AS AnimationPaymentTotal 
	FROM payment INNER JOIN rental
	ON payment.rental_id = rental.rental_id
	INNER JOIN inventory 
	ON inventory.inventory_id = rental.inventory_id
	INNER JOIN film_list
	ON inventory.film_id = film_list.FID
	WHERE film_list.category = "Animation";

	+-----------------------+
	| AnimationPaymentTotal |
	+-----------------------+
	|               4656.30 |
	+-----------------------+
	1 row in set (0.01 sec)






**** TASK 4 :  Find out the top 3 rented category of movies by “PATRICIA JOHNSON” ****

 mysql> SELECT category.name AS Category, count(*) AS rentalCount
	FROM rental
	INNER JOIN inventory
	ON inventory.inventory_id = rental.inventory_id
	INNER JOIN film_category 
	ON film_category.film_id = inventory.film_id
	INNER JOIN category
	ON category.category_id = film_category.category_id
	WHERE customer_id = 
		(SELECT customer_id FROM customer 
          		WHERE customer.first_name = "PATRICIA" 
				AND customer.last_name = "JOHNSON" 
		)
		
 	GROUP BY category.name
 	ORDER BY 2 desc
 	LIMIT 3;
 
	+-----------+-------------+
	| Category  | rentalCount |
	+-----------+-------------+
	| Sports    |           5 |
	| Classics  |           4 |
	| Animation |           3 |
	+-----------+-------------+
	3 rows in set (0.00 sec)




**** TASK 5 : Find out the number of R rated movies rented by “SUSAN WILSON” *****

 mysql> SELECT COUNT(*) as Rented_R_Movies_By_Susan
	FROM rental
	INNER JOIN inventory
	ON inventory.inventory_id = rental.inventory_id
	INNER JOIN film 
	ON film.film_id = inventory.film_id
	WHERE customer_id = 
			(SELECT customer_id FROM customer 
		  WHERE customer.first_name = "SUSAN" 
					AND customer.last_name = "WILSON" 
			)
	AND film.rating = "R";
	
	+--------------------------+
	| Rented_R_Movies_By_Susan |
	+--------------------------+
	|                        3 |
	+--------------------------+
	1 row in set (0.00 sec)

	
